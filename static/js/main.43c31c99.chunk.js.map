{"version":3,"sources":["components/TextCrawl/HomeTextCrawl.js","components/Layout/MainArea/MainArea.js","data/socialmedia.js","data/menu.js","components/SocialMediaIcons/SocialMediaIcon.js","components/NavIcons/HomeNavIcon.js","components/NavIcons/NavIcon.js","components/Layout/Tools/ColorSwitcher.js","containers/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["TextCrawl","theater","theaterJS","on","getCurrentActor","$element","classList","add","remove","addActor","speed","accuracy","addScene","replay","bind","colorMode","this","props","className","id","Component","MainArea","route","children","socialmedia","platform","url","tooltiptext","menuitems","type","SocialMediaIcon","alt","src","onClick","window","open","HomeNavIcon","onRouteChange","NavIcon","ColorSwitcher","onColorModeChange","AsyncPageProjects","lazy","AsyncPageAbout","AsyncPageImprint","MainPage","setState","getRouteComponent","state","fallback","page","map","link","i","key","menuitem","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43c31c99.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport theaterJS from 'theaterjs';\n\nimport './HomeTextCrawl.scss';\n\n\nclass TextCrawl extends Component {\n    componentDidMount() {\n\n        var theater = theaterJS()\n        theater\n            .on('type:start, erase:start', function () {\n                theater.getCurrentActor().$element.classList.add('actor__content--typing')\n            })\n            .on('type:end, erase:end', function () {\n                theater.getCurrentActor().$element.classList.remove('actor__content--typing')\n            })\n\n        theater\n            .addActor('Christoph', { speed: 0.8, accuracy: 0.6 })\n            .addScene('Christoph:Hi.', 1000)\n            .addScene(\"Christoph:My name is Christoph.\", 400)\n            .addScene(\"Christoph:I'm a Frontend-Webdeveloper, sharing my journey to mastery in React.js, Redux & more.\", 400)\n            .addScene(theater.replay.bind(theater))\n    }\n    render() {\n        const { colorMode } = this.props;\n        return (\n            <main className=\"textCrawlScene\">\n                <div className={`textCrawlActor ${colorMode === 'dark' ? \"textCrawlActorDarkMode\" : \"\"}`}>\n                    <div id=\"Christoph\" className=\"actor__content\"></div>\n                </div>\n            </main>\n        );\n    }\n\n}\n\nexport default TextCrawl;","import React from 'react'\n\nimport './MainArea.scss';\n\nconst MainArea = (props) => {\n    const { route, colorMode } = props;\n    return (\n        <div className={`mainArea ${route === 'home' ? \"mainAreaHome\" : \"\"} ${colorMode === 'dark' ? \"mainAreaDark\" : \"\"}`}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default MainArea;","export const socialmedia = [{\n    platform: 'github',\n    url: 'https://github.com/cscheffauer',\n    tooltiptext: 'Github'\n}, {\n    platform: 'linkedin',\n    url: 'https://www.linkedin.com/in/christoph-scheffauer/',\n    tooltiptext: 'Linkedin'\n}, {\n    platform: 'instagram',\n    url: 'https://instagr.am/christoph.codes',\n    tooltiptext: 'Instagram'\n}];","export const menuitems = [{\n    type: 'projects',\n    tooltiptext: 'Projects'\n}, {\n    type: 'about',\n    tooltiptext: 'About Me'\n}, {\n    type: 'imprint',\n    tooltiptext: 'Disclaimer'\n}];","import React from 'react'\n\nimport './SocialMediaIcon.scss';\n\nconst SocialMediaIcon = ({ type, url, tooltiptext, colorMode }) => {\n    return (\n        <div className=\"tooltipSocial\">\n            <img className={`iconSocial ${colorMode === 'dark' ? \"iconSocialDarkMode\" : \"\"}`} alt=\"Social Media Icon\" src={`./icons/${type}.png`} onClick={() => window.open(url, \"_blank\")} />\n            <span className={`tooltiptextSocial ${colorMode === 'dark' ? \"tooltiptextSocialDarkMode\" : \"\"}`}>{tooltiptext}</span>\n        </div>\n    )\n\n}\n\nexport default SocialMediaIcon;","import React from 'react'\n\nimport './NavIcons.scss';\n\nconst HomeNavIcon = ({ onRouteChange, route, colorMode }) => {\n    return <img id=\"homeIcon\" className={`homeIcon ${route === 'home' ? \"homeIconSelected\" : \"\"} ${colorMode === 'dark' ? \"homeIconDarkMode\" : \"\"}`} alt=\"HomeNav Icon\" src={`./icons/home.png`} onClick={() => onRouteChange('home')} />;\n}\n\nexport default HomeNavIcon;","import React, { Fragment } from 'react'\n\nimport './NavIcons.scss';\n\nconst NavIcon = ({ onRouteChange, type, tooltiptext, route, colorMode }) => {\n\n    return (\n        <Fragment>\n            <div className={`tooltipNavIcons ${colorMode === 'dark' ? \"tooltipNavIconsDarkMode\" : \"\"} ${type === 'imprint' ? \"hideImprint\" : \"\"}`}>\n                <img className={`navIcon ${route === type ? \"navIconSelected\" : \"\"} ${colorMode === 'dark' ? \"navIconDarkMode\" : \"\"}`} alt=\"HomeNav Icon\" src={`./icons/${type}.png`} onClick={() => onRouteChange(type)} />\n                <span className={`tooltiptext ${colorMode === 'dark' ? \"tooltiptextDarkMode\" : \"\"}`}>{tooltiptext}</span>\n            </div>\n            <span className={`${type === 'imprint' ? \"showImprintText\" : \"hideImprintText\"} ${colorMode === 'dark' ? \"ImprintTextDarkMode\" : \"\"}`} onClick={() => onRouteChange(\"imprint\")}>Imprint</span>\n        </Fragment>\n\n    )\n}\n\nexport default NavIcon;","import React, { Fragment } from 'react'\n\nimport './ColorSwitcher.scss';\n\n\n\nconst ColorSwitcher = ({ onColorModeChange, colorMode }) => {\n    return (\n        <Fragment>\n            <span className={`normal ${colorMode === 'normal' ? \"selectedColorModeNormal\" : \"\"}`} onClick={() => onColorModeChange('normal')}></span>\n            <span className={`dark ${colorMode === 'dark' ? \"selectedColorModeDark\" : \"\"}`} onClick={() => onColorModeChange('dark')}></span>\n        </Fragment>\n    )\n}\n\nexport default ColorSwitcher;\n\n","import React, { Component, Suspense, lazy } from 'react'\n\nimport TextCrawl from '../components/TextCrawl/HomeTextCrawl'\nimport MainArea from '../components/Layout/MainArea/MainArea'\nimport { socialmedia } from '../data/socialmedia'\nimport { menuitems } from '../data/menu'\n\nimport './MainPage.scss';\nimport SocialMediaIcon from '../components/SocialMediaIcons/SocialMediaIcon';\nimport HomeNavIcon from '../components/NavIcons/HomeNavIcon';\nimport NavIcon from '../components/NavIcons/NavIcon';\nimport ColorSwitcher from '../components/Layout/Tools/ColorSwitcher'\n\n\nconst AsyncPageProjects = lazy(() => import('../components/Pages/ProjectsContainer'));\nconst AsyncPageAbout = lazy(() => import('../components/Pages/About'));\nconst AsyncPageImprint = lazy(() => import('../components/Pages/Imprint'));\n\nclass MainPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            socialmedia: socialmedia,\n            menuitems: menuitems,\n            route: 'home',\n            colorMode: 'normal'\n        };\n    }\n    onRouteChange = (route) => {\n        this.setState({ route: route });\n    }\n\n    onColorModeChange = (colorMode) => {\n        this.setState({ colorMode: colorMode });\n    }\n    getRouteComponent = (route) => {\n        if (route === 'home') {\n            return <TextCrawl colorMode={this.state.colorMode} />\n        } else if (route === 'projects') {\n            return (\n                <Suspense fallback={< div > Loading...</div >}>\n                    <AsyncPageProjects />\n                </Suspense>\n            )\n        } else if (route === 'about') {\n            return (\n                <Suspense fallback={< div > Loading...</div >}>\n                    <AsyncPageAbout />\n                </Suspense>\n            )\n        } else {\n            return (\n                <Suspense fallback={< div > Loading...</div >}>\n                    <AsyncPageImprint />\n                </Suspense>\n            )\n        }\n    }\n\n    render() {\n        let page;\n        page = this.getRouteComponent(this.state.route);\n        return (\n            <div id=\"MainPage\" className={`MainPage ${this.state.colorMode === 'dark' ? \"MainPageDark\" : \"\"}`}  >\n                <header className=\"header\">\n                    <div>Imprint should be placed here</div>\n                </header>\n                <MainArea route={this.state.route} colorMode={this.state.colorMode}>\n                    {page}\n                </MainArea>\n\n                <footer className=\"footer\">\n                    <div className=\"socialMediaWrapper\">\n                        {\n                            this.state.socialmedia.map((link, i) => {\n                                return (\n                                    <SocialMediaIcon key={i} type={link.platform} url={link.url} tooltiptext={link.tooltiptext} colorMode={this.state.colorMode} />\n                                );\n                            })\n                        }\n                    </div>\n                    <HomeNavIcon onRouteChange={this.onRouteChange} route={this.state.route} colorMode={this.state.colorMode} />\n                    {\n                        this.state.menuitems.map((menuitem, i) => {\n                            return (\n                                <NavIcon onRouteChange={this.onRouteChange} key={i} type={menuitem.type} url={menuitem.url} tooltiptext={menuitem.tooltiptext} route={this.state.route} colorMode={this.state.colorMode} />\n                            );\n                        })\n                    }\n                </footer>\n                <div className=\"colorSwitcher\"><ColorSwitcher onColorModeChange={this.onColorModeChange} colorMode={this.state.colorMode}></ColorSwitcher></div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default MainPage;","import React from 'react';\nimport MainPage from './containers/MainPage';\n\nconst App = () => {\n  return (<MainPage />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}